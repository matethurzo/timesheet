package com.liferay.timesheet.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.liferay.timesheet.model.Task;
import com.liferay.timesheet.model.TaskModel;
import com.liferay.timesheet.model.TaskSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Task service. Represents a row in the &quot;timesheet_Task&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.timesheet.model.TaskModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TaskImpl}.
 * </p>
 *
 * @author Adorjan
 * @see TaskImpl
 * @see com.liferay.timesheet.model.Task
 * @see com.liferay.timesheet.model.TaskModel
 * @generated
 */
@JSON(strict = true)
public class TaskModelImpl extends BaseModelImpl<Task> implements TaskModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a task model instance should use the {@link com.liferay.timesheet.model.Task} interface instead.
     */
    public static final String TABLE_NAME = "timesheet_Task";
    public static final Object[][] TABLE_COLUMNS = {
            { "taskId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "startDate", Types.TIMESTAMP },
            { "endDate", Types.TIMESTAMP },
            { "taskName", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table timesheet_Task (taskId LONG not null primary key,companyId LONG,userId LONG,startDate DATE null,endDate DATE null,taskName VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table timesheet_Task";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.liferay.timesheet.model.Task"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.liferay.timesheet.model.Task"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.liferay.timesheet.model.Task"),
            true);
    public static long USERID_COLUMN_BITMASK = 1L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.liferay.timesheet.model.Task"));
    private static ClassLoader _classLoader = Task.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Task.class };
    private long _taskId;
    private long _companyId;
    private long _userId;
    private String _userUuid;
    private long _originalUserId;
    private boolean _setOriginalUserId;
    private Date _startDate;
    private Date _endDate;
    private String _taskName;
    private long _columnBitmask;
    private Task _escapedModel;

    public TaskModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Task toModel(TaskSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Task model = new TaskImpl();

        model.setTaskId(soapModel.getTaskId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setStartDate(soapModel.getStartDate());
        model.setEndDate(soapModel.getEndDate());
        model.setTaskName(soapModel.getTaskName());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Task> toModels(TaskSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Task> models = new ArrayList<Task>(soapModels.length);

        for (TaskSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    public long getPrimaryKey() {
        return _taskId;
    }

    public void setPrimaryKey(long primaryKey) {
        setTaskId(primaryKey);
    }

    public Serializable getPrimaryKeyObj() {
        return new Long(_taskId);
    }

    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    public Class<?> getModelClass() {
        return Task.class;
    }

    public String getModelClassName() {
        return Task.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("taskId", getTaskId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("startDate", getStartDate());
        attributes.put("endDate", getEndDate());
        attributes.put("taskName", getTaskName());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long taskId = (Long) attributes.get("taskId");

        if (taskId != null) {
            setTaskId(taskId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Date startDate = (Date) attributes.get("startDate");

        if (startDate != null) {
            setStartDate(startDate);
        }

        Date endDate = (Date) attributes.get("endDate");

        if (endDate != null) {
            setEndDate(endDate);
        }

        String taskName = (String) attributes.get("taskName");

        if (taskName != null) {
            setTaskName(taskName);
        }
    }

    @JSON
    public long getTaskId() {
        return _taskId;
    }

    public void setTaskId(long taskId) {
        _taskId = taskId;
    }

    @JSON
    public long getCompanyId() {
        return _companyId;
    }

    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @JSON
    public long getUserId() {
        return _userId;
    }

    public void setUserId(long userId) {
        _columnBitmask |= USERID_COLUMN_BITMASK;

        if (!_setOriginalUserId) {
            _setOriginalUserId = true;

            _originalUserId = _userId;
        }

        _userId = userId;
    }

    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    public long getOriginalUserId() {
        return _originalUserId;
    }

    @JSON
    public Date getStartDate() {
        return _startDate;
    }

    public void setStartDate(Date startDate) {
        _startDate = startDate;
    }

    @JSON
    public Date getEndDate() {
        return _endDate;
    }

    public void setEndDate(Date endDate) {
        _endDate = endDate;
    }

    @JSON
    public String getTaskName() {
        if (_taskName == null) {
            return StringPool.BLANK;
        } else {
            return _taskName;
        }
    }

    public void setTaskName(String taskName) {
        _taskName = taskName;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            Task.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Task toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Task) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    public Task toUnescapedModel() {
        return (Task) this;
    }

    @Override
    public Object clone() {
        TaskImpl taskImpl = new TaskImpl();

        taskImpl.setTaskId(getTaskId());
        taskImpl.setCompanyId(getCompanyId());
        taskImpl.setUserId(getUserId());
        taskImpl.setStartDate(getStartDate());
        taskImpl.setEndDate(getEndDate());
        taskImpl.setTaskName(getTaskName());

        taskImpl.resetOriginalValues();

        return taskImpl;
    }

    public int compareTo(Task task) {
        long primaryKey = task.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Task)) {
            return false;
        }

        Task task = (Task) obj;

        long primaryKey = task.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        TaskModelImpl taskModelImpl = this;

        taskModelImpl._originalUserId = taskModelImpl._userId;

        taskModelImpl._setOriginalUserId = false;

        taskModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Task> toCacheModel() {
        TaskCacheModel taskCacheModel = new TaskCacheModel();

        taskCacheModel.taskId = getTaskId();

        taskCacheModel.companyId = getCompanyId();

        taskCacheModel.userId = getUserId();

        Date startDate = getStartDate();

        if (startDate != null) {
            taskCacheModel.startDate = startDate.getTime();
        } else {
            taskCacheModel.startDate = Long.MIN_VALUE;
        }

        Date endDate = getEndDate();

        if (endDate != null) {
            taskCacheModel.endDate = endDate.getTime();
        } else {
            taskCacheModel.endDate = Long.MIN_VALUE;
        }

        taskCacheModel.taskName = getTaskName();

        String taskName = taskCacheModel.taskName;

        if ((taskName != null) && (taskName.length() == 0)) {
            taskCacheModel.taskName = null;
        }

        return taskCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{taskId=");
        sb.append(getTaskId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", startDate=");
        sb.append(getStartDate());
        sb.append(", endDate=");
        sb.append(getEndDate());
        sb.append(", taskName=");
        sb.append(getTaskName());
        sb.append("}");

        return sb.toString();
    }

    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append("com.liferay.timesheet.model.Task");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>taskId</column-name><column-value><![CDATA[");
        sb.append(getTaskId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>startDate</column-name><column-value><![CDATA[");
        sb.append(getStartDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>endDate</column-name><column-value><![CDATA[");
        sb.append(getEndDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>taskName</column-name><column-value><![CDATA[");
        sb.append(getTaskName());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
